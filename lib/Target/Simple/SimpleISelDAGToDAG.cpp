#include "Simple.h"
#include "SimpleTargetMachine.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineFunction.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAG.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/IR/CallingConv.h"
#include "llvm/IR/Constants.h"
#include "llvm/IR/DerivedTypes.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/Intrinsics.h"
#include "llvm/IR/LLVMContext.h"
#include "llvm/Support/Compiler.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"
#include "llvm/Target/TargetLowering.h"
using namespace llvm;

/// SimpleDAGToDAGISel - Simple specific code to select Simple machine
/// instructions for SelectionDAG operations.
///
namespace {
  class SimpleDAGToDAGISel : public SelectionDAGISel {
    const SimpleSubtarget &Subtarget;

  public:
    SimpleDAGToDAGISel(SimpleTargetMachine &TM, CodeGenOpt::Level OptLevel)
      : SelectionDAGISel(TM, OptLevel),
        Subtarget(*TM.getSubtargetImpl()) { }

    SDNode *Select(SDNode *N);

    virtual const char *getPassName() const {
      return "Simple DAG->DAG Pattern Instruction Selection";
    } 
    
    // Include the pieces autogenerated from the target description.
    #include "SimpleGenDAGISel.inc"
  };
}  // end anonymous namespace

/// createSimpleISelDag - This pass converts a legalized DAG into a 
/// Simple-specific DAG, ready for instruction scheduling.
///
FunctionPass *llvm::createSimpleISelDag(SimpleTargetMachine &TM,
                                        CodeGenOpt::Level OptLevel) 
{
  return new SimpleDAGToDAGISel(TM, OptLevel);
}

SDNode *SimpleDAGToDAGISel::Select(SDNode *N) 
{
  return SelectCode(N);
}
